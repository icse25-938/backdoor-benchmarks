--- a/contrib/oss-fuzz/tiff_read_rgba_fuzzer.cc
+++ b/contrib/oss-fuzz/tiff_read_rgba_fuzzer.cc
@@ -27,13 +27,14 @@
 #include <sstream>
 #include <tiffio.h>
 #include <tiffio.hxx>
+#include <vector>
 
 
 /* stolen from tiffiop.h, which is a private header so we can't just include it */
 /* safe multiply returns either the multiplied value or 0 if it overflowed */
 #define __TIFFSafeMultiply(t,v,m) ((((t)(m) != (t)0) && (((t)(((v)*(m))/(m))) == (t)(v))) ? (t)((v)*(m)) : (t)0)
 
-const uint64_t MAX_SIZE = 500000000;
+const uint64 MAX_SIZE = 500000000;
 
 extern "C" void handle_error(const char *unused, const char *unused2, va_list unused3) {
     return;
@@ -57,8 +58,8 @@ extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
   if (!tif) {
       return 0;
   }
-  uint32_t w, h;
-  uint32_t* raster;
+  uint32 w, h;
+  uint32* raster;
 
   TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &w);
   TIFFGetField(tif, TIFFTAG_IMAGELENGTH, &h);
@@ -67,29 +68,29 @@ extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
       TIFFClose(tif);
       return 0;
   }
-  uint64_t bufsize = TIFFTileSize64(tif);
+  uint64 bufsize = TIFFTileSize64(tif);
   /* don't continue if the buffer size greater than the max allowed by the fuzzer */
   if (bufsize > MAX_SIZE || bufsize == 0) {
       TIFFClose(tif);
       return 0;
   }
   /* another hack to work around an OOM in tif_fax3.c */
-  uint32_t tilewidth = 0;
-  uint32_t imagewidth = 0;
+  uint32 tilewidth = 0, tilewidth2;
+  uint32 imagewidth = 0;
   TIFFGetField(tif, TIFFTAG_TILEWIDTH, &tilewidth);
   TIFFGetField(tif, TIFFTAG_IMAGEWIDTH, &imagewidth);
-  tilewidth = __TIFFSafeMultiply(uint32_t, tilewidth, 2);
-  imagewidth = __TIFFSafeMultiply(uint32_t, imagewidth, 2);
-  if (tilewidth * 2 > MAX_SIZE || imagewidth * 2 > MAX_SIZE || tilewidth == 0 || imagewidth == 0) {
+  tilewidth2 = __TIFFSafeMultiply(uint32, tilewidth, 2);
+  imagewidth = __TIFFSafeMultiply(uint32, imagewidth, 2);
+  if (tilewidth2 * 2 > MAX_SIZE || imagewidth * 2 > MAX_SIZE || (tilewidth != 0 && tilewidth2 == 0) || imagewidth == 0) {
       TIFFClose(tif);
       return 0;
   }
-  uint32_t size = __TIFFSafeMultiply(uint32_t, w, h);
+  uint32 size = __TIFFSafeMultiply(uint32, w, h);
   if (size > MAX_SIZE || size == 0) {
       TIFFClose(tif);
       return 0;
   }
-  raster = (uint32_t*) _TIFFmalloc(size * sizeof (uint32_t));
+  raster = (uint32*) _TIFFmalloc(size * sizeof (uint32));
   if (raster != NULL) {
       TIFFReadRGBAImage(tif, w, h, raster, 0);
       _TIFFfree(raster);
@@ -99,81 +100,12 @@ extern "C" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {
   return 0;
 }
 
-#ifdef STANDALONE
-
-template<class T> static void CPL_IGNORE_RET_VAL(T) {}
-
-static void Usage(int, char* argv[])
-{
-    fprintf(stderr, "%s [--help] [-repeat N] filename.\n", argv[0]);
-    exit(1);
-}
-
-int main(int argc, char* argv[])
-{
-    int nRet = 0;
-    void* buf = NULL;
-    int nLen = 0;
-    int nLoops = 1;
-    const char* pszFilename = NULL;
+int main() {
+  std::vector<uint8_t> tiff;
+  while (!feof(stdin)) {
+    tiff.push_back(static_cast<uint8_t>(getchar_unlocked()));
+  }
 
-    for(int i = 1; i < argc; i++ )
-    {
-        if( i + 1 < argc && strcmp(argv[i], "-repeat") == 0 )
-        {
-            nLoops = atoi(argv[i+1]);
-            i++;
-        }
-        else if( strcmp(argv[i], "-dummy") == 0 )
-        {
-            uint8_t dummy = ' ';
-            return LLVMFuzzerTestOneInput(&dummy, 1);
-        }
-        else if( strcmp(argv[i], "--help") == 0 )
-        {
-            Usage(argc, argv);
-        }
-        else if( argv[i][0] == '-' )
-        {
-            fprintf(stderr, "Unrecognized option: %s", argv[i]);
-            Usage(argc, argv);
-        }
-        else
-        {
-            pszFilename = argv[i];
-        }
-    }
-    if( pszFilename == nullptr )
-    {
-        fprintf(stderr, "No filename specified\n");
-        Usage(argc, argv);
-    }
-    FILE* f = fopen(pszFilename, "rb");
-    if( !f )
-    {
-        fprintf(stderr, "%s does not exist.\n", pszFilename);
-        exit(1);
-    }
-    fseek(f, 0, SEEK_END);
-    nLen = (int)ftell(f);
-    fseek(f, 0, SEEK_SET);
-    buf = malloc(nLen);
-    if( !buf )
-    {
-        fprintf(stderr, "malloc failed.\n");
-        fclose(f);
-        exit(1);
-    }
-    CPL_IGNORE_RET_VAL(fread(buf, nLen, 1, f));
-    fclose(f);
-    for( int i = 0; i < nLoops; i++ )
-    {
-        nRet = LLVMFuzzerTestOneInput(static_cast<const uint8_t*>(buf), nLen);
-        if( nRet != 0 )
-            break;
-    }
-    free(buf);
-    return nRet;
+  return LLVMFuzzerTestOneInput(tiff.data(), tiff.size());
 }
 
-#endif
--- a/autogen.sh
+++ b/autogen.sh
@@ -5,16 +5,3 @@ aclocal -I ./m4
 autoheader
 automake --foreign --add-missing --copy
 autoconf
-# Get latest config.guess and config.sub from upstream master since
-# these are often out of date.
-for file in config.guess config.sub
-do
-    echo "$0: getting $file..."
-    wget -q --timeout=5 -O config/$file.tmp \
-      "https://git.savannah.gnu.org/cgit/config.git/plain/${file}" \
-      && mv config/$file.tmp config/$file \
-      && chmod a+x config/$file
-    retval=$?
-    rm -f config/$file.tmp
-    test $retval -eq 0 || exit $retval
-done
